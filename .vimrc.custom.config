"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""
"用户自定义配置（该文件放一般性配置，可覆盖~/.vimrc里的配置，若要增加、卸载插件，请放入~/.vimrc.custom.plugins）
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"" 开启相对行号
"" set relativenumber
"
"" 开启鼠标
"" set mouse=a
"
"" 设置光标所在列高亮
"" set cursorcolumn
"
"" indentLine 开启代码对齐线
"" let g:indentLine_enabled = 1
"
"" markdown
"" let system = system('uname -s')
"" if system == "Darwin\n"
""     let g:mkdp_path_to_chrome = "/Applications/Google\\
"Chrome.app/Contents/MacOS/Google\\ Chrome"
"" else
""     let g:mkdp_path_to_chrome = '/usr/bin/google-chrome-stable %U'
"" endif
"" nmap <silent> <F7> <Plug>MarkdownPreview
"" imap <silent> <F7> <Plug>MarkdownPreview
"" nmap <silent> <F8> <Plug>StopMarkdownPreview
"" imap <silent> <F8> <Plug>StopMarkdownPreview

"禁用响铃声
set visualbell
set vb t_vb=
set updatetime=100
set balloondelay=250
set wrap
let g:auto_save = 1  " enable AutoSave on Vim startup"
let g:auto_save_events = ["InsertLeave"]

"----------------------------------------------------------------------
" INSERT 模式下使用 EMACS 键位
"----------------------------------------------------------------------
inoremap <c-a> <home>
inoremap <c-e> <end>
inoremap <c-d> <del>
inoremap <c-_> <c-k>

"NSERT 模式偶尔需要移动的方便些）
" 使用 SecureCRT/XShell 等终端软件需设置：Backspace sends delete
" " 详见：http://www.skywind.me/blog/archives/2021
" "----------------------------------------------------------------------
 noremap <C-h> <left>
 noremap <C-j> <down>
 noremap <C-k> <up>
 noremap <C-l> <right>
 inoremap <C-h> <left>
 inoremap <C-j> <down>
 inoremap <C-k> <up>
 inoremap <C-l> <right>

" 这个映射会在光标之后追加当前的日期和时间
 map <leader>T a<C-R>=strftime("%F %T")<CR>
 "nnoremap <silent> <leader>k :CloseBuffer<cr>
 let g:ycm_server_python_interpreter = '/usr/bin/python3.6'
 "让vim支持鼠标滚动,这样可以鼠标滚动浏览弹窗中显示不全的内容
 set mouse=a
 " autocmd FileType go  call govim#config#Set("ExperimentalProgressPopups",1)
 " map <leader>t :GOVIMGoTest<CR>
 "let mapleader=" "
 "在go类型的代码编辑模式禁用YouCompleteMe代码提示"
 let g:ycm_filetype_blacklist={'php':1,'javascript':1,'css':1,'html':1,'go':1,'python':1,'rust':1}

 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 "  以下是coc配置
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 " Use `[g` and `]g` to navigate diagnostics
 " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
 nmap <silent> [g <Plug>(coc-diagnostic-prev)
 nmap <silent> ]g <Plug>(coc-diagnostic-next)
 " GoTo code navigation.
 nmap <silent> gd <Plug>(coc-definition)
 nmap <silent> gy <Plug>(coc-type-definition)
 nmap <silent> gi <Plug>(coc-implementation)
 nmap <silent> gr <Plug>(coc-references)
 " Add `:Format` command to format current buffer.
 command! -nargs=0 Format :call CocAction('format')
 " Add `:OR` command for organize imports of the current buffer.
 " command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
 augroup mygroup
     autocmd!
     " Setup formatexpr specified filetype(s).
     autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
     " Update signature help on jump placeholder.
     autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
 augroup END

"For Vim Ctrl-s
" save in normal mode
"nmap <C-S> :Format<CR>:update<CR>
" save in visual mode
"vmap <C-S> <C-C>:Format<CR>:update<CR>
" save in insert mode, return to inert mode after string
"imap <C-S> <C-O>:format<CR>:update<CR>

"For Vim Ctrl-s
" save in normal mode
nmap <C-S> :update<CR>
" save in visual mode
vmap <C-S> <C-C>:update<CR>
" save in insert mode, return to inert mode after string
imap <C-S> <C-O>:update<CR>

"Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
     if (index(['vim','help'], &filetype) >= 0)
          execute 'h '.expand('<cword>')
     elseif (coc#rpc#ready())
           call CocActionAsync('doHover')
     else
           execute '!' . &keywordprg . " " . expand('<cword>')
     endif
endfunction

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"              Coc go扩展插件配置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')
autocmd FileType go nmap gtj :CocCommand go.tags.add json<cr>
autocmd FileType go nmap gty :CocCommand go.tags.add yaml<cr>
autocmd FileType go nmap gtx :CocCommand go.tags.clear<cr>
autocmd FileType go nmap gtv :CocCommand go.version<cr>
autocmd FileType go nmap gtu :CocCommand go.install.tools<cr>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""              vim-go 配置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"augroup go
"      autocmd!
"
"            " Show by default 4 spaces for a tab
"              autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4  shiftwidth=4
"              " :GoTest
"              autocmd FileType go nmap <leader>t  <Plug>(go-test)
"              " :GoRun
"              autocmd FileType go nmap <leader>r  <Plug>(go-run)
"              " :GoDoc
"              autocmd FileType go nmap <Leader>d <Plug>(go-doc)
"              " :GoCoverageToggle
"              autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
"              " :GoInfo
"              autocmd FileType go nmap <Leader>i <Plug>(go-info)
"              augroup END




"让NERDTree在右侧
let NERDTreeWinPos="right"
"F3键切换打开关闭NERDToggle
map <F3> :NERDTreeToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
"        现代化的构建任务系统的配置
""""""""""""""""""""""""'""'""""""""""""""""""""""
noremap <silent><F2> :AsyncTask file-run<cr>
noremap <silent><f5> :AsyncTask file-build<cr>
"使用 F9 快速切换快速修复窗口
noremap <F9> :call asyncrun#quickfix_toggle(8)<cr>
let g:asyncrun_open = 6
"告诉 asyncrun 运行时自动打开高度为 6 的 quickfix窗口，不然你看不到任何输出，除非你自己手动用 :copen 打开它
let g:asynctasks_term_pos = 'termhelp'
let g:asynctasks_term_rows = 5
let g:quickui_color_scheme = 'papercol dark'

" 清楚所有目录项目
call quickui#menu#reset()
call quickui#menu#install('&File',[
            \["&Save",'w','保存文件:w'],
            \["Save All","wa",'保存所有文件:wa'],
            \["&New File",'new','打开一个新的窗口编辑新文件:new'],
            \["&Enew File",'enew','在当前窗口创建新文件:enew'],
            \["&Vnew File","vnew",'在左右切分的新窗口中编辑新文件:vnew'],
            \["&Tabnew File","tabnew",'在新的标签页中编辑新文件:tabnew'],
            \["&Open File\t(F3)",'call feedkeys(":edit")',],
            \["--",''],
            \["&Exit",'q','退出:q'],
            \])
call quickui#menu#install('&Help',[
            \['&Tutor','h tutor','入门文档 h tutor'],
            \['&Quickref','h quickref','快速帮助 h quickref'],
            \['&Index','h index','查询Vim所有键盘命令定义 h Index'],
            \['&Summary','h summary','帮助你更好的使用内置帮助系统 h summary'],
            \["&Pattern",'h pattern.txt','正则表达式帮助 h pattern.txt'],
            \["&Eval",'h eval','脚本编写帮助 h eval'],
            \["&Function-list",'h function-list','查看VimScript的函数列表'],
            \["&Windeows",'h windows.txt','窗口使用帮助h windows.txt'],
            \["&Tabpage",'h tabpage.txt','标签页使用帮助h Tabpage'],
            \['&Tips','h tips','查看Vim内置的常用技巧文档h tips'],
            \['&Quote','h quote','寄存器h quote'],
            \['&AutoCommand-events','h AutoCommand-events','所有可能事件'],
            \['&Write-plugin','h write-plugin','编写插件h write-plugin'],
             \])

" 打开下面选项，允许在 vim 的下面命令行部分显示帮助信息
let g:quickui_show_tip = 1
"  定义按两次空格就打开上面的目录
noremap <space><space> :call quickui#menu#open()<cr>

nmap    wh  :vertical resize +3<CR>
nmap    wl  :vertical resize -3<CR>
